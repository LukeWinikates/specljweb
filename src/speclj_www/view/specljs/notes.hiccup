[:h2 "Specljs and ClojureScript"]

[:p "Specljs is just Speclj for ClojureScript.  About 98% of Specljs works just like Speclj.  So the best way to learn Specljs is to complete our short " [:b [:a {:href "/tutorial"} "speclj tutorial"]] "."]
[:p "But there are a few differences between Specljs and Speclj.  This section lists those differences as well as some helpful tips for debugging Specljs."]

[:h3 "Differences Between Specljs and Speclj"]

[:h4 "Namespace Requirements"]

[:p "The standard Speclj namespace import looks something like:"]
[:h5 "Standard Speclj Namespace"]
[:p "<pre class=\"textmate-source twilight\"><span class=\"source source_clojure\"><span class=\"meta meta_function meta_function_namespace meta_function_namespace_clojure\">(<span class=\"support support_function support_function_namespace support_function_namespace_clojure\">ns</span> <span class=\"entity entity_name entity_name_namespace entity_name_namespace_clojure\"><span class=\"source source_symbol source_symbol_clojure\">change-counter</span><span class=\"keyword keyword_operator keyword_operator_classpath keyword_operator_classpath_clojure\">.</span><span class=\"source source_symbol source_symbol_clojure\">core-spec</span></span>
  (<span class=\"support support_other support_other_keyword support_other_keyword_namespace support_other_keyword_namespace_clojure\">:require</span> [<span class=\"source source_symbol source_symbol_clojure\">speclj</span><span class=\"keyword keyword_operator keyword_operator_classpath keyword_operator_classpath_clojure\">.</span><span class=\"source source_symbol source_symbol_clojure\">core</span> <span class=\"support support_other support_other_keyword support_other_keyword_namespace support_other_keyword_namespace_clojure\">:refer</span> <span class=\"support support_other support_other_keyword support_other_keyword_namespace support_other_keyword_namespace_clojure\">:all</span>]))</span></pre>"]

[:p "However, ClojureScript doesn't currently support \":refer :all\" which means that ClojureScript's :require statements are a bit more complex.  Thus, Specljs must be imported slightly differently:"]
[:h5 "Standard Specljs Namespace"]
[:p "<pre class=\"textmate-source twilight\"><span class=\"source source_clojure\"><span class=\"meta meta_function meta_function_namespace meta_function_namespace_clojure\">(<span class=\"support support_function support_function_namespace support_function_namespace_clojure\">ns</span> <span class=\"entity entity_name entity_name_namespace entity_name_namespace_clojure\"><span class=\"source source_symbol source_symbol_clojure\">change-counter</span><span class=\"keyword keyword_operator keyword_operator_classpath keyword_operator_classpath_clojure\">.</span><span class=\"source source_symbol source_symbol_clojure\">core-spec</span></span>
    (<span class=\"constant constant_string constant_string_symbole constant_string_symbole_clojure\"><span class=\"keyword keyword_operator keyword_operator_symbole keyword_operator_symbole_clojure\">:</span><span class=\"source source_symbol source_symbol_clojure\">require-macros</span></span> [<span class=\"source source_symbol source_symbol_clojure\">specljs</span><span class=\"keyword keyword_operator keyword_operator_classpath keyword_operator_classpath_clojure\">.</span><span class=\"source source_symbol source_symbol_clojure\">core</span> <span class=\"constant constant_string constant_string_symbole constant_string_symbole_clojure\"><span class=\"keyword keyword_operator keyword_operator_symbole keyword_operator_symbole_clojure\">:</span><span class=\"source source_symbol source_symbol_clojure\">refer</span></span> [<span class=\"source source_symbol source_symbol_clojure\">describe</span> <span class=\"source source_symbol source_symbol_clojure\">it</span> <span class=\"source source_symbol source_symbol_clojure\">should<span class=\"keyword keyword_other keyword_other_mark keyword_other_mark_clojure\">=</span></span>]])
    (<span class=\"support support_other support_other_keyword support_other_keyword_namespace support_other_keyword_namespace_clojure\">:require</span> [<span class=\"source source_symbol source_symbol_clojure\">specljs</span><span class=\"keyword keyword_operator keyword_operator_classpath keyword_operator_classpath_clojure\">.</span><span class=\"source source_symbol source_symbol_clojure\">core</span>]
    [<span class=\"source source_symbol source_symbol_clojure\">change-counter</span><span class=\"keyword keyword_operator keyword_operator_classpath keyword_operator_classpath_clojure\">.</span><span class=\"source source_symbol source_symbol_clojure\">core</span> <span class=\"support support_other support_other_keyword support_other_keyword_namespace support_other_keyword_namespace_clojure\">:as</span> <span class=\"source source_symbol source_symbol_clojure\">core</span>]))</span></span></pre>"]

[:p "As you can see, the <b>:require-macros</b> function must be included."]
[:p "But we still have to do a bit more housekeeping.  As you can see in the require-macros call, we are including 'describe' 'it' and 'should='.  <b>But what if we wanted to use another Specljs function</b> like 'context'? We would need to explicitly add 'context' to the :require-macros vector.  Otherwise ClojureScript won't find the context function.  Every Specljs function you use must be included in your :require-macros vector."]

[:p "So if you're adding a number of Specljs functions, your :require-macros vector can easily look something like this:"]
[:h5 "Specljs Namespace with Large :require-macros Vector"]
[:p "<pre class=\"textmate-source twilight\"><span class=\"source source_clojure\"><span class=\"meta meta_function meta_function_namespace meta_function_namespace_clojure\">(<span class=\"support support_function support_function_namespace support_function_namespace_clojure\">ns</span> <span class=\"entity entity_name entity_name_namespace entity_name_namespace_clojure\"><span class=\"source source_symbol source_symbol_clojure\">change-counter</span><span class=\"keyword keyword_operator keyword_operator_classpath keyword_operator_classpath_clojure\">.</span><span class=\"source source_symbol source_symbol_clojure\">core-spec</span></span>
  (<span class=\"constant constant_string constant_string_symbole constant_string_symbole_clojure\"><span class=\"keyword keyword_operator keyword_operator_symbole keyword_operator_symbole_clojure\">:</span><span class=\"source source_symbol source_symbol_clojure\">require-macros</span></span> [<span class=\"source source_symbol source_symbol_clojure\">specljs</span><span class=\"keyword keyword_operator keyword_operator_classpath keyword_operator_classpath_clojure\">.</span><span class=\"source source_symbol source_symbol_clojure\">core</span> <span class=\"constant constant_string constant_string_symbole constant_string_symbole_clojure\"><span class=\"keyword keyword_operator keyword_operator_symbole keyword_operator_symbole_clojure\">:</span><span class=\"source source_symbol source_symbol_clojure\">refer</span></span> [<span class=\"source source_symbol source_symbol_clojure\">describe</span> <span class=\"source source_symbol source_symbol_clojure\">it</span> <span class=\"source source_symbol source_symbol_clojure\">should<span class=\"keyword keyword_other keyword_other_mark keyword_other_mark_clojure\">=</span></span>
                                        <span class=\"source source_symbol source_symbol_clojure\">before-all</span> <span class=\"source source_symbol source_symbol_clojure\">after-all</span>
                                        <span class=\"source source_symbol source_symbol_clojure\">before</span> <span class=\"source source_symbol source_symbol_clojure\">after</span> <span class=\"source source_symbol source_symbol_clojure\">should-not</span>
                                        <span class=\"source source_symbol source_symbol_clojure\">should</span> <span class=\"source source_symbol source_symbol_clojure\">run-specs</span> <span class=\"source source_symbol source_symbol_clojure\">around</span>]])
  (<span class=\"support support_other support_other_keyword support_other_keyword_namespace support_other_keyword_namespace_clojure\">:require</span> [<span class=\"source source_symbol source_symbol_clojure\">specljs</span><span class=\"keyword keyword_operator keyword_operator_classpath keyword_operator_classpath_clojure\">.</span><span class=\"source source_symbol source_symbol_clojure\">core</span>]
            [<span class=\"source source_symbol source_symbol_clojure\">change-counter</span><span class=\"keyword keyword_operator keyword_operator_classpath keyword_operator_classpath_clojure\">.</span><span class=\"source source_symbol source_symbol_clojure\">core</span> <span class=\"support support_other support_other_keyword support_other_keyword_namespace support_other_keyword_namespace_clojure\">:as</span> <span class=\"source source_symbol source_symbol_clojure\">core</span>]))</span></span></pre>"]

[:br]
[:h4 "A Note About The State Of ClojureScript"]
[:p "As of ClojureScript stable release version 0.0-2080 some of Clojure's core function are not implemented in Clojurescript.  Thus, attempting to use these function in Specljs will have the same results as attempting to use them in any ClojureScript file.  They won't work."]

 [:h2 "Debugging Tips"]
 [:p "ClojureScript is an amazing tool, but it is really new.  This means that its error message can be a bit obtuse.  Below are common error message that Specljs produces and what they might mean:"]

 [:h4 "1. 'undefined is not an object'"]
  [:p "There are a number of reason for this error but it is usually generated when a function cannot be found. Below are a few strategies for problem-solving this error."]
  [:h5 "General Error"]
 [:p "This error can be generated easily be generated if (1) a function is spelled incorrectly or (2) a function does not exist within the an imported namespace.  The error is 'general' because it is really no different than a normal Clojure error. Confirm that the error'd function is spelled correctly and included in the appropriate namespace."]
[:h5 "ClojureScript Specific Error"]
  [:p "However there is a ClojureScript specific issue that can also cause this error. This issue comes from ClojureScript's ommision of the \":refer :all\" option.  An example is below:"]
  [:h5 "Example Source File"]
 [:p "<pre class=\"textmate-source twilight\"><span class=\"source source_clojure\"><span class=\"meta meta_function meta_function_namespace meta_function_namespace_clojure\">(<span class=\"support support_function support_function_namespace support_function_namespace_clojure\">ns</span> <span class=\"entity entity_name entity_name_namespace entity_name_namespace_clojure\"><span class=\"source source_symbol source_symbol_clojure\">change-counter</span><span class=\"keyword keyword_operator keyword_operator_classpath keyword_operator_classpath_clojure\">.</span><span class=\"source source_symbol source_symbol_clojure\">core</span></span>)</span>

 <span class=\"meta meta_function meta_function_clojure\">(<span class=\"storage storage_type storage_type_function storage_type_function_type storage_type_function_type_clojure\">defn</span> <span class=\"entity entity_name entity_name_function entity_name_function_clojure\"><span class=\"source source_symbol source_symbol_clojure\">equals-5<span class=\"keyword keyword_other keyword_other_mark keyword_other_mark_clojure\">?</span></span></span> <span class=\"meta meta_function meta_function_body meta_function_body_clojure\"><span class=\"meta meta_function meta_function_parameters meta_function_parameters_vector meta_function_parameters_vector_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_begin punctuation_definition_vector_begin_clojure\">[</span><span class=\"variable variable_parameter variable_parameter_clojure\"><span class=\"source source_symbol source_symbol_clojure\">n</span></span><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_end punctuation_definition_vector_end_clojure\">]</span></span><span class=\"meta meta_function meta_function_body meta_function_body_code meta_function_body_code_clojure\">
    <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"keyword keyword_operator keyword_operator_clojure\">=</span> <span class=\"constant constant_numeric constant_numeric_float constant_numeric_float_clojure\">5</span> <span class=\"source source_symbol source_symbol_clojure\">n</span>)</span></span></span>)</span></span></pre>"]

  [:h5 "Example Starting Test File"]
[:p "<pre class=\"textmate-source twilight\"><span class=\"source source_clojure\"><span class=\"meta meta_function meta_function_namespace meta_function_namespace_clojure\">(<span class=\"support support_function support_function_namespace support_function_namespace_clojure\">ns</span> <span class=\"entity entity_name entity_name_namespace entity_name_namespace_clojure\"><span class=\"source source_symbol source_symbol_clojure\">change-counter</span><span class=\"keyword keyword_operator keyword_operator_classpath keyword_operator_classpath_clojure\">.</span><span class=\"source source_symbol source_symbol_clojure\">core-spec</span></span>
  (<span class=\"constant constant_string constant_string_symbole constant_string_symbole_clojure\"><span class=\"keyword keyword_operator keyword_operator_symbole keyword_operator_symbole_clojure\">:</span><span class=\"source source_symbol source_symbol_clojure\">require-macros</span></span> [<span class=\"source source_symbol source_symbol_clojure\">specljs</span><span class=\"keyword keyword_operator keyword_operator_classpath keyword_operator_classpath_clojure\">.</span><span class=\"source source_symbol source_symbol_clojure\">core</span> <span class=\"constant constant_string constant_string_symbole constant_string_symbole_clojure\"><span class=\"keyword keyword_operator keyword_operator_symbole keyword_operator_symbole_clojure\">:</span><span class=\"source source_symbol source_symbol_clojure\">refer</span></span> [<span class=\"source source_symbol source_symbol_clojure\">describe</span> <span class=\"source source_symbol source_symbol_clojure\">it</span> <span class=\"source source_symbol source_symbol_clojure\">should<span class=\"keyword keyword_other keyword_other_mark keyword_other_mark_clojure\">=</span></span>]])
  (<span class=\"support support_other support_other_keyword support_other_keyword_namespace support_other_keyword_namespace_clojure\">:require</span> [<span class=\"source source_symbol source_symbol_clojure\">specljs</span><span class=\"keyword keyword_operator keyword_operator_classpath keyword_operator_classpath_clojure\">.</span><span class=\"source source_symbol source_symbol_clojure\">core</span>]
            [<span class=\"source source_symbol source_symbol_clojure\">change-counter</span><span class=\"keyword keyword_operator keyword_operator_classpath keyword_operator_classpath_clojure\">.</span><span class=\"source source_symbol source_symbol_clojure\">core</span> <span class=\"support support_other support_other_keyword support_other_keyword_namespace support_other_keyword_namespace_clojure\">:as</span> <span class=\"source source_symbol source_symbol_clojure\">counter</span>]))</span>
  
<span class=\"comment comment_line comment_line_semicolon comment_line_semicolon_start comment_line_semicolon_start_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_comment punctuation_definition_comment_clojure\">;</span>note that change-counter.core does have a valid equals5? function
</span><span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">describe</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>change-counter.core<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>
    <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">it</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>tests a simple function<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>)</span>
        <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">should<span class=\"keyword keyword_other keyword_other_mark keyword_other_mark_clojure\">=</span></span> <span class=\"constant constant_language constant_language_clojure\">true</span> <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">equals5<span class=\"keyword keyword_other keyword_other_mark keyword_other_mark_clojure\">?</span></span> <span class=\"constant constant_numeric constant_numeric_float constant_numeric_float_clojure\">5</span>)</span>)</span>)</span></span></pre>"]

[:p "This test file should generate an 'undefined is not an object error'.  Why?  Because the change-counter.core namespace functions are not automatically included into the spec namespace, so 'equals5?' cannot be found.  To fix this, (1) make sure your namespaces are aliased (using :as is a common and effective approach) and (2) prefix you methods with their namespace alias:"]
[:h5 "Updated Test File Describe Block"]
[:p "<pre class=\"textmate-source twilight\"><span class=\"source source_clojure\"><span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">describe</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>change-counter.core<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>
    <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">it</span> <span class=\"string string_quoted string_quoted_double string_quoted_double_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_begin punctuation_definition_string_begin_clojure\">\"</span>tests a simple function<span class=\"punctuation punctuation_definition punctuation_definition_string punctuation_definition_string_end punctuation_definition_string_end_clojure\">\"</span></span>)</span>
        <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">should<span class=\"keyword keyword_other keyword_other_mark keyword_other_mark_clojure\">=</span></span> <span class=\"constant constant_language constant_language_clojure\">true</span> <span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"source source_symbol source_symbol_clojure\">counter</span><span class=\"keyword keyword_operator keyword_operator_qualified keyword_operator_qualified_clojure\">/</span><span class=\"source source_symbol source_symbol_clojure\">equals5<span class=\"keyword keyword_other keyword_other_mark keyword_other_mark_clojure\">?</span></span> <span class=\"constant constant_numeric constant_numeric_float constant_numeric_float_clojure\">5</span>)</span>)</span>)</span></span></pre>"]

[:p "Note how the \"equals5?\" method now has its namespace alias - counter - prefixed.  This prefix should remove the 'undefined is not an object' error."]
[:p "Generally speaking, ClojureScript requires a greater focus on what is being imported, what is being aliased, and function prefixes."]

[:h4 "2. \"var is already aliased\""]
[:p "This error arises when utilizing specljs autorun feature (\"lein spec -a\") and it usually means that the developer has changed an alias name (\"refer something :as -changed_alias-\") without restarting Specljs."]
[:h5 "Original File"]
[:p "<pre class=\"textmate-source twilight\"><span class=\"source source_clojure\"><span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"constant constant_string constant_string_symbole constant_string_symbole_clojure\"><span class=\"keyword keyword_operator keyword_operator_symbole keyword_operator_symbole_clojure\">:</span><span class=\"source source_symbol source_symbol_clojure\">require</span></span> <span class=\"meta meta_expression meta_expression_vector meta_expression_vector_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_begin punctuation_definition_vector_begin_clojure\">[</span><span class=\"source source_symbol source_symbol_clojure\">specljs</span><span class=\"keyword keyword_operator keyword_operator_classpath keyword_operator_classpath_clojure\">.</span><span class=\"source source_symbol source_symbol_clojure\">core</span><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_end punctuation_definition_vector_end_clojure\">]</span></span>
  <span class=\"meta meta_expression meta_expression_vector meta_expression_vector_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_begin punctuation_definition_vector_begin_clojure\">[</span><span class=\"source source_symbol source_symbol_clojure\">change-counter</span><span class=\"keyword keyword_operator keyword_operator_classpath keyword_operator_classpath_clojure\">.</span><span class=\"source source_symbol source_symbol_clojure\">core</span> <span class=\"constant constant_string constant_string_symbole constant_string_symbole_clojure\"><span class=\"keyword keyword_operator keyword_operator_symbole keyword_operator_symbole_clojure\">:</span><span class=\"source source_symbol source_symbol_clojure\">as</span></span> <span class=\"source source_symbol source_symbol_clojure\">core</span><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_end punctuation_definition_vector_end_clojure\">]</span></span>)</span></span></pre>"]
[:h5 "Current File"]
[:p "<pre class=\"textmate-source twilight\"><span class=\"source source_clojure\"><span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"constant constant_string constant_string_symbole constant_string_symbole_clojure\"><span class=\"keyword keyword_operator keyword_operator_symbole keyword_operator_symbole_clojure\">:</span><span class=\"source source_symbol source_symbol_clojure\">require</span></span> <span class=\"meta meta_expression meta_expression_vector meta_expression_vector_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_begin punctuation_definition_vector_begin_clojure\">[</span><span class=\"source source_symbol source_symbol_clojure\">specljs</span><span class=\"keyword keyword_operator keyword_operator_classpath keyword_operator_classpath_clojure\">.</span><span class=\"source source_symbol source_symbol_clojure\">core</span><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_end punctuation_definition_vector_end_clojure\">]</span></span>
  <span class=\"meta meta_expression meta_expression_vector meta_expression_vector_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_begin punctuation_definition_vector_begin_clojure\">[</span><span class=\"source source_symbol source_symbol_clojure\">change-counter</span><span class=\"keyword keyword_operator keyword_operator_classpath keyword_operator_classpath_clojure\">.</span><span class=\"source source_symbol source_symbol_clojure\">core</span> <span class=\"constant constant_string constant_string_symbole constant_string_symbole_clojure\"><span class=\"keyword keyword_operator keyword_operator_symbole keyword_operator_symbole_clojure\">:</span><span class=\"source source_symbol source_symbol_clojure\">as</span></span> <span class=\"source source_symbol source_symbol_clojure\">counter</span><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_end punctuation_definition_vector_end_clojure\">]</span></span>)</span></span></pre>"]
[:p "Note how the change-counter.core alias changed from \"core\" to \"counter\".  It's perfectly fine to change an alias but it will cause the above error.  To fix this error simply restart the spec autorunner."]

[:h4 "3.  \":refer must be followed by a sequence of symbols\""]
[:p "This error arises when a developer attempts to use :refer :all in a clojurescript file.  A simple way around this error is to alias your imports such as:"]
[:p "<pre class=\"textmate-source twilight\"><span class=\"source source_clojure\"><span class=\"meta meta_sexpr meta_sexpr_clojure\">(<span class=\"constant constant_string constant_string_symbole constant_string_symbole_clojure\"><span class=\"keyword keyword_operator keyword_operator_symbole keyword_operator_symbole_clojure\">:</span><span class=\"source source_symbol source_symbol_clojure\">require</span></span> <span class=\"meta meta_expression meta_expression_vector meta_expression_vector_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_begin punctuation_definition_vector_begin_clojure\">[</span><span class=\"source source_symbol source_symbol_clojure\">specljs</span><span class=\"keyword keyword_operator keyword_operator_classpath keyword_operator_classpath_clojure\">.</span><span class=\"source source_symbol source_symbol_clojure\">core</span><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_end punctuation_definition_vector_end_clojure\">]</span></span>
  <span class=\"meta meta_expression meta_expression_vector meta_expression_vector_clojure\"><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_begin punctuation_definition_vector_begin_clojure\">[</span><span class=\"source source_symbol source_symbol_clojure\">change-counter</span><span class=\"keyword keyword_operator keyword_operator_classpath keyword_operator_classpath_clojure\">.</span><span class=\"source source_symbol source_symbol_clojure\">core</span> <span class=\"constant constant_string constant_string_symbole constant_string_symbole_clojure\"><span class=\"keyword keyword_operator keyword_operator_symbole keyword_operator_symbole_clojure\">:</span><span class=\"source source_symbol source_symbol_clojure\">as</span></span> <span class=\"source source_symbol source_symbol_clojure\">core</span><span class=\"punctuation punctuation_definition punctuation_definition_vector punctuation_definition_vector_end punctuation_definition_vector_end_clojure\">]</span></span>)</span></span></pre>"]
[:p "This alias allows you to use all of the functions withiin a namespace so long as those functions are prefixed with the alias.  In the example below change-counter.core is aliased as core."]
